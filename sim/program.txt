// Setup Registers for Operations
// x10 reserved for monitoring result
// addi x1 x0 1
// addi x2 x0 2
// addi x3 x0 3
// addi x4 x0 4

// ------ R-Types ------

// add x10 x0 x1    x = 1
// add x10 x1 x1    x = 2

// sub x10 x2 x1    x = 1
// sub x10 x1 x3    x = -2

// mult x10 x0 x1   x = 0
// mult x10 x2 x2   x = 4

// and x10 x0 x1    x = 0
// and x10 x1 x1    x = 1

// or x10 x0 x1     x = 1
// or x10 x1 x2     x = 3?

// xor x10 x1 x1    x = 0
// xor x10 x0 x1    x = 1

// not x10 x1       x = 0
// not x10 x0       x = 1

// ------ I-Types ------

// addi x10 x0 -1    x = -1
// addi x10 x1 -1    x = 0

// subi x10 x2 1    x = 1
// subi x10 x1 3    x = -2

// multi x10 x0 1   x = 0
// multi x10 x2 2   x = 4

// andi x10 x0 1    x = 0
// andi x10 x1 1    x = 1

// ori x10 x0 1     x = 1
// ori x10 x1 2     x = 3?

// xori x10 x1 1    x = 0
// xori x10 x0 1    x = 1

// noti x10 1       x = 0
// noti x10 0       x = 1

// ------ B-Types ------    x0 should be skipped

// beq x1 x1 2
// addi x0 x0 -1
// bne x0 x1 2
// addi x0 x0 -1
// blt x0 x1 2
// addi x0 x0 -1
// ble x1 x1 2
// addi x0 x0 -1
// bgl x1 x0 2
// addi x0 x0 -1
// bge x1 x1 2
// addi x0 x0 -1

// beq x0 x1 12
// addi x10 x0 1
// bne x1 x1 10
// addi x10 x10 1
// blt x1 x0 8
// addi x10 x10 1
// ble x1 x0 6
// addi x10 x10 1
// bgl x0 x1 4
// addi x10 x10 1
// bge x0 x1 2
// addi x10 x10 1   x = 6

// ------ J-Types ------
// jump 2
// addi x0 x0 -1

// ------ M-Types ------
// store x1 1(x1)   Store 1 @ 0x02
// load x10 x(x2)   load 1 from 0x02

// ------ S-Types ------
// addi x1 x0 1
// addi x2 x0 2
// addi x3 x0 3
// addi x4 x0 4
// addi x6 x0 -1
// addi x7 x0 -2
// addi x8 x0 -3
// addi x9 x0 -4
// CALL
// RET
